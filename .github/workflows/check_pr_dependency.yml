name: Check PR Dependency

on:
  pull_request:
    types: [opened, reopened, synchronize]
    # 'synchronize' runs when the head branch is updated (e.g., a new commit is pushed)

jobs:
  check_dependency:
    runs-on: ubuntu-latest
    steps:
      - name: Extract Dependent PR URL
        id: extract_url
        run: |
          PR_BODY="${{ github.event.pull_request.body }}"
          # You mentioned using a *comment*, but reading the *body* is easier for the Action
          # since it's immediately available in the event payload. 
          # Let's look for a specific marker in the PR body/description.
          # Example marker: "Depends on: https://github.com/OWNER/REPO/pull/2"
          
          # This regex looks for 'Depends on:' followed by a URL to a pull request
          DEPENDENCY_URL=$(echo "$PR_BODY" | grep -oP 'Depends on: \Khttps?://github\.com/[^/]+/[^/]+/pull/\d+')
          
          if [ -z "$DEPENDENCY_URL" ]; then
            echo "::notice file={0}::No dependency URL found in PR description. Skipping check."
            echo "dependency_url=" >> $GITHUB_OUTPUT
            exit 0 # Exit successfully if no dependency is marked
          fi

          echo "Found dependency URL: $DEPENDENCY_URL"
          echo "dependency_url=$DEPENDENCY_URL" >> $GITHUB_OUTPUT
        shell: bash

      - name: Check Dependent PR Status
        if: steps.extract_url.outputs.dependency_url != ''
        uses: actions/github-script@v7
        with:
          # Ensure this line is correct and the secret exists!
          github-token: ${{ secrets.GH_PAT_FOR_PR_CHECKS }} 
         
          script: |
            const dependencyUrl = '${{ steps.extract_url.outputs.dependency_url }}';
            const parts = dependencyUrl.split('/');
            // The PR number is the last part of the URL: .../pull/NUMBER
            const dependentPrNumber = parts[parts.length - 1];
            // The repository owner is two parts before the pull part
            const dependentRepo = parts[parts.length - 3];
            // The repository name is two parts before the pull part
            const dependentOwner = parts[parts.length - 4];

            console.log(`Checking status for PR #${dependentPrNumber} in ${dependentOwner}/${dependentRepo}`);

            try {
              const { data: pullRequest } = await github.rest.pulls.get({
                owner: dependentOwner,
                repo: dependentRepo,
                pull_number: dependentPrNumber,
              });

              if (pullRequest.merged) {
                console.log(`Dependent PR #${dependentPrNumber} has been merged. Proceeding.`);
              } else {
                core.setFailed(`Dependency check failed: PR #${dependentPrNumber} has NOT been merged yet. Please merge it first.`);
              }
            } catch (error) {
              core.setFailed(`Could not retrieve status for PR #${dependentPrNumber}. Error: ${error.message}`);
            }
