name: Check PR Dependency

on:
  pull_request:
    types: [opened, reopened, synchronize]
    # 'synchronize' runs when the head branch is updated (e.g., a new commit is pushed)

jobs:
  check_dependency:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read # Grant explicit read access to PR data
    steps:
      - name: Extract Dependent PR URL
        id: extract_url
        run: |
          PR_BODY="${{ github.event.pull_request.body }}"
          # You mentioned using a *comment*, but reading the *body* is easier for the Action
          # since it's immediately available in the event payload. 
          # Let's look for a specific marker in the PR body/description.
          # Example marker: "Depends on: https://github.com/OWNER/REPO/pull/2"
          
          # This regex looks for 'Depends on:' followed by a URL to a pull request
          DEPENDENCY_URL=$(echo "$PR_BODY" | grep -oP 'Depends on: \Khttps?://github\.com/[^/]+/[^/]+/pull/\d+')
          
          if [ -z "$DEPENDENCY_URL" ]; then
            echo "::notice file={0}::No dependency URL found in PR description. Skipping check."
            echo "dependency_url=" >> $GITHUB_OUTPUT
            exit 0 # Exit successfully if no dependency is marked
          fi

          echo "Found dependency URL: $DEPENDENCY_URL"
          echo "dependency_url=$DEPENDENCY_URL" >> $GITHUB_OUTPUT
        shell: bash

      - name: Check Dependent PR Status via cURL
        if: steps.extract_url.outputs.dependency_url != ''
        run: |
          # 1. Parse the dependent PR details from the extracted URL
          DEPENDENCY_URL="${{ steps.extract_url.outputs.dependency_url }}"
          
          # Extracts the OWNER, REPO, and PR_NUMBER from the URL
          PR_DETAILS=$(echo "$DEPENDENCY_URL" | awk -F'/' '{print $(NF-3)"/"$(NF-2)"/"$NF}')
          OWNER=$(echo "$PR_DETAILS" | cut -d'/' -f1)
          REPO=$(echo "$PR_DETAILS" | cut -d'/' -f2)
          PR_NUMBER=$(echo "$PR_DETAILS" | cut -d'/' -f3)

          echo "Checking status for PR #${PR_NUMBER} in ${OWNER}/${REPO}"

          # 2. Use curl to call the GitHub API (Pulls endpoint)
          # Use your Personal Access Token (PAT) for authentication.
          API_URL="https://api.github.com/repos/${OWNER}/${REPO}/pull/${PR_NUMBER}"
          
          RESPONSE=$(curl -s -L \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: token ${{ secrets.GH_PAT_FOR_PR_CHECKS }}" \
            "$API_URL")

          # 3. Parse the 'merged' status from the JSON response using jq
          # 'jq' is pre-installed on GitHub-hosted runners.
          MERGED_STATUS=$(echo "$RESPONSE" | jq -r '.merged')

          # 4. Determine the result and fail if not merged
          if [ "$MERGED_STATUS" == "true" ]; then
            echo "‚úÖ Dependent PR #${PR_NUMBER} has been merged. Proceeding."
          elif [ "$MERGED_STATUS" == "false" ]; then
            echo "‚ùå Dependency check failed: PR #${PR_NUMBER} has NOT been merged yet. Merge it first."
            exit 1 # Fails the workflow step
          else
            # This handles cases where the PR number is invalid or API call fails
            echo "üö® Error checking PR status or PR not found. API Response:"
            echo "$RESPONSE"
            exit 1 # Fails the workflow step
          fi
        shell: bash
